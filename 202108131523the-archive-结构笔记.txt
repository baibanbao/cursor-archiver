复杂的故事--笔记中的结构层

2018年3月27日，作者：Sascha   

Zettelkasten既不是一个结构整齐的笔记归档系统，便于查阅，也不是一个动荡的深海，从无法理解的混乱中产生的想法。在我的档案中，有三个层次，是在多年的Zettelkasten方法工作中出现的。我没有事先计划它们。这反而是一个有机的过程。

## 底层。内容

第一层当然由内容笔记组成。我写作，我研究，我得到的想法。所有这些都会进入我的档案。全文搜索和标签搜索足以处理一个较小的档案。在这个阶段，强调标签的重要性是很自然的。你正在频繁地使用它们，它们是进入你的档案的重要入口。

但过了一段时间，你就会跟不上了。当我搜索标签的时候，我得到了几百条笔记。我必须回顾它们，把一个笔记和其中一些联系起来，或者掌握我对某个特定主题的写作和思考。

自然而然，这时就需要整理档案。我不记得我有多少笔记，当我遇到这种情况时。当我有500到700条笔记时，我引入了枢纽式笔记。（1）我给自己一个关于该主题最重要的笔记的概述。

当这变得难以处理时，肯定是在1000到1500条笔记之间。我需要更多的结构。每增加一个笔记，我就会继续失去对档案的控制力。我并不是很担心，因为卢曼，这位泽特卡斯特方法的教父，从一开始就没有掌握过。但我想。我对他有很大的技术优势。我需要一个握把。

然后，结构说明出现了。

中间层。结构笔记
我的档案变得像大海一样不透明。你可以看到几英寸深的地方，但你知道还有很多东西你无法进入。你可以潜入深海，但在任何时候，你仍然只能看到几英寸。因此，我把它想成是未开发的领域，为此我需要制图方法之类的。

我从结构化的列表开始，以拥有工具来迅速准确地了解我的档案中的某个空间是如何结构化的。(顺便说一下，类似于Luhmann对他的枢纽笔记的做法）。)

现在，我已经到了一个地步，我的结构笔记嵌入了结构本身。看看我的一个结构笔记吧。

结构说明的截图
一个真实世界的结构注释。
它们看起来很像一个目录。这是因为它们是目录。目录是一本书的章节结构，是一个有层次和秩序的集合。当然，为了方便读者阅读，一本书的页面顺序是按照目录排列的。结构说明不需要遵守任何说教的需要，也不需要遵守你以外的任何需要。

在Zettelkasten中，此时有两个层次。

内容。微小的、细小的内容。
结构说明。内容的表格。
结构注释与标签有相似之处。两者都指向注释的集合。结构注解只是增加了一个元素。它们是有附加结构的集合。这种增加的结构提供了一个更好的概述，并增加了档案的效用。

最上面一层。主结构注释和双哈希值
一段时间后，我不仅有了结构笔记，结构内容笔记，我还有了结构笔记，主要是结构笔记的集合。它们成为我的顶层结构笔记，因为它们开始漂浮在我的档案馆的顶部，可以这么说。

我关于人体运动的结构笔记就是一个完美的例子。首先，我写了很多关于训练的内容。训练结构笔记与力量训练、耐力训练、短跑训练、壮士训练、机动性训练等相联系。但过了一段时间，有几个主题不适合这个空间。像砍柴这样的体力劳动或整个非运动空间（如长期坐着）怎么办？这个话题扩大了，我找到了一个新的保护伞：人类运动。这个结构说明就这样不断地浮在上面。它就像冰山的一角。无论有多少水结成冰，被加到它的身体里，顶端都保持在上面。

另一种类型的顶层结构笔记是我马上以这种方式设计的。我从不同的角度（甚至从大罪的角度；视角很广！）对自我价值的话题做了很多工作。结构笔记上有一个特殊的标签。##自我价值。如果我搜索#自我价值（注意是单哈希！），我会得到所有涉及这个概念的笔记，但如果是双哈希，我就会直接找到我档案中的钱。顶层结构注释。

这两种顶级结构笔记的区别在于它们是如何变成顶级的：人类发展的出现是因为我的档案中的结构变化，而带有##自我价值的笔记则被标记为顶级结构笔记，因为我把它设计成一个顶级的笔记。(我在人类发展的笔记上也标了一个双哈希）。)

为什么要讲这个故事
每一个自组织的知识体系都有其突发结构的支撑。帮助你处理这些结构的软件需要满足几个标准，即其处理复杂结构的能力。一个标准是。该软件是否提供对这些不同结构层的访问？如果它不提供处理这些结构的方法，一旦你的档案变得更加复杂，它就不能帮助你的工作。

不处理结构层的一个标志是项目文件夹，以及一般的文件夹。如果你不能应付潜在的无限复杂性，你就必须进行补偿。补偿的一种方式是降低对系统的要求。如果一个系统封装了单个项目或主题，那么它有可能无法应对复杂性。如果你只想在一个项目上工作，这没有问题。但是，如果你想把一个系统作为写作的辅助工具，作为思考的工具，你应该选择一个足够强大的系统，以应付一生的思考。所以，要注意文件夹和项目。它们是处理封装和限制复杂性的手段。此外，它们阻碍了知识生产的最有成效的方式：跨学科的部分。

更重要的是，这一切不是关于软件。它是关于你设置的系统。有些软件会催促你，有时甚至推动你做出系统设计决定。以Wikis为例。它们中的大多数有两种不同的模式。

阅读模式。
编辑模式。
阅读模式是默认的。但在大多数时候，你应该创建、编辑和重新编辑内容。这种默认状态，这种阅读和编辑的分离，是生产内容的一个小但重要的障碍。你会有不同的表现。这是我不喜欢维基百科用于知识工作的一个原因。它们很笨拙，对于不同的目的，效果更好。

不同层次的问题是类似的。如果你选择的软件没有以一种复杂的方式处理这些层，从长远来看，你将不会获得好处。你的档案将注意作为一个整体工作。我认为这是许多人退回到以项目为中心的解决方案的原因之一，例如，为每本书策划一套笔记。大的和有机的（=动态和活的）系统所带来的问题被避免了。但是，创造比你更伟大的东西的机会也是如此。

